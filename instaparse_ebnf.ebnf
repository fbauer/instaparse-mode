(* This is instaparses own ebnf grammar, which can be dumped by the
following little clojure snippet:

user> (require '[instaparse.core :as insta])
nil
user> (require '[instaparse.cfg :as cfg])
nil
user> (insta/parser cfg/cfg :start :rules)
*)

<rules> = <opt-whitespace> rule+
alt = cat (<opt-whitespace> <"|"> <opt-whitespace> cat)*
hide = <"<"> <opt-whitespace> alt-or-ord <opt-whitespace> <">">
nt = !epsilon #"[^, \r\t\n<>(){}\[\]+*?:=|'\"#&!;./]+(?x) #Non-terminal"
string = #"'[^'\\]*(?:\\.[^'\\]*)*'(?x) #Single-quoted string" | #"\"[^\"\\]*(?:\\.[^\"\\]*)*\"(?x) #Double-quoted string"
neg = <"!"> <opt-whitespace> factor
comment = "(*" inside-comment "*)"
ord = cat (<opt-whitespace> <"/"> <opt-whitespace> cat)+
paren = <"("> <opt-whitespace> alt-or-ord <opt-whitespace> <")">
inside-comment = #"(?s)(?:(?!(?:\(\*|\*\))).)*(?x) #Comment text" (comment #"(?s)(?:(?!(?:\(\*|\*\))).)*(?x) #Comment text")*
regexp = #"#'[^'\\]*(?:\\.[^'\\]*)*'(?x) #Single-quoted regexp" | #"#\"[^\"\\]*(?:\\.[^\"\\]*)*\"(?x) #Double-quoted regexp"
hide-nt = <"<"> <opt-whitespace> nt <opt-whitespace> <">">
opt = <"["> <opt-whitespace> alt-or-ord <opt-whitespace> <"]"> | factor <opt-whitespace> <"?">
cat = (<opt-whitespace> (factor | look | neg) <opt-whitespace>)+
epsilon = "Epsilon" | "epsilon" | "EPSILON" | "eps" | "Îµ"
opt-whitespace = #"[,\s]*(?x) #optional whitespace" (comment #"[,\s]*(?x) #optional whitespace")*
rule-separator = ":" | ":=" | "::=" | "="
star = <"{"> <opt-whitespace> alt-or-ord <opt-whitespace> <"}"> | factor <opt-whitespace> <"*">
look = <"&"> <opt-whitespace> factor
<factor> = nt | string | regexp | opt | star | plus | paren | hide | epsilon
rule = (nt | hide-nt) <opt-whitespace> <rule-separator> <opt-whitespace> alt-or-ord (<opt-whitespace | opt-whitespace (";" | ".") opt-whitespace>)
<alt-or-ord> = alt | ord
plus = factor <opt-whitespace> <"+">